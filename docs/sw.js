const CACHE_NAME="story-app-v1",IMAGE_CACHE="image-cache",API_CACHE="api-cache",STATIC_ASSETS=["/","/index.html","/manifest.json","/icons/icon-192x192.png","/assets/images/fallback.png"];self.addEventListener("install",(t=>{console.log("[SW] Installing..."),t.waitUntil(caches.open(CACHE_NAME).then((t=>t.addAll(STATIC_ASSETS)))),self.skipWaiting()})),self.addEventListener("activate",(t=>{console.log("[SW] Activating..."),t.waitUntil(caches.keys().then((t=>Promise.all(t.map((t=>{if(![CACHE_NAME,IMAGE_CACHE,API_CACHE].includes(t))return caches.delete(t)})))))),self.clients.claim()})),self.addEventListener("fetch",(t=>{const e=new URL(t.request.url);"GET"===t.request.method&&("https://story-api.dicoding.dev"===e.origin&&e.pathname.startsWith("/images/")?t.respondWith(caches.open(IMAGE_CACHE).then((e=>e.match(t.request).then((n=>n||fetch(t.request).then((n=>(n.ok&&e.put(t.request,n.clone()),n))).catch((()=>caches.match("/assets/images/fallback.png")))))))):"https://story-api.dicoding.dev"===e.origin&&e.pathname.startsWith("/v1/stories/story-")?t.respondWith(fetch(t.request).then((t=>{if(t.ok)return t;throw new Error("Response not OK")})).catch((()=>new Response(JSON.stringify({error:!0,message:"Detail tidak tersedia saat offline."}),{status:200,headers:{"Content-Type":"application/json"}})))):"https://story-api.dicoding.dev"!==e.origin||"/v1/stories"!==e.pathname?t.respondWith(caches.match(t.request).then((e=>e||fetch(t.request).catch((()=>caches.match("/index.html")))))):t.respondWith(fetch(t.request).then((t=>{if(t.ok)return t;throw new Error("Response not OK")})).catch((()=>new Response(JSON.stringify([]),{status:200,headers:{"Content-Type":"application/json"}})))))})),self.addEventListener("push",(function(t){let e={};try{e=t.data.json()}catch(t){e={title:"Story App",message:"Ada notifikasi baru!"}}const n=e.title||"Story App",s={body:e.message||"Notifikasi dari server.",icon:"/icons/icon-192x192.png",badge:"/icons/icon-192x192.png",data:{url:e.url||"/"}};t.waitUntil(self.registration.showNotification(n,s))})),self.addEventListener("notificationclick",(function(t){t.notification.close();const e=t.notification.data?.url||"/";t.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then((t=>{for(const n of t)if(n.url===e&&"focus"in n)return n.focus();if(clients.openWindow)return clients.openWindow(e)})))}));